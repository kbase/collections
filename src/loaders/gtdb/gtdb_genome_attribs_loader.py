import argparse

import pandas as pd

import src.common.storage.collection_and_field_names as names
import src.loaders.common.loader_common_names as loader_common_names
from gtdb_loader_helper import convert_to_json, parse_genome_id, init_genome_atrri_doc
from src.common.storage.collection_and_field_names import (
    FLD_COLLECTION_ID,
    FLD_LOAD_VERSION,
)

"""
PROTOTYPE

Prepare GTDB genome attributes data in JSON format for arango import.

This script parses genome features from the GTDB metadata files. Those features should be put into
loader_common_names.SELECTED_FEATURES.

NOTE: The Document Key ("_key") in Arango DB is generated by applying a hash function to a string consisting of the 
kbase_collection, load_version, and genome id parsed from the accession field from the GTDB metadata file. 
(e.g. GTDB_r207.kbase.1_GCA_000016605.1, GTDB_r207.kbase.1_GCA_000169995.1)

usage: gtdb_genome_attribs_loader.py [-h] --load_ver LOAD_VER [--kbase_collection KBASE_COLLECTION] [-o OUTPUT]
                                     load_files [load_files ...]

PROTOTYPE - Prepare GTDB genome statistics data in JSON format for arango import.

options:
  -h, --help            show this help message and exit

required named arguments:
  load_files            GTDB genome metadata files
  --load_ver LOAD_VER   KBase load version. (e.g. r207.kbase.1)

optional arguments:
  --kbase_collection KBASE_COLLECTION
                        kbase collection identifier name (default: GTDB)
  -o OUTPUT, --output OUTPUT
                        output JSON file path (default: gtdb_genome_attribs.json


e.g. gtdb_genome_attribs_loader.py bac120_metadata_r207.tsv ar53_metadata_r207.tsv --load_version r207.kbase.1
     gtdb_genome_attribs_loader.py bac120_metadata_r207.tsv ar53_metadata_r207.tsv --load_version r207.kbase.1 --kbase_collection GTDB
     gtdb_genome_attribs_loader.py bac120_metadata_r207.tsv ar53_metadata_r207.tsv --load_version r207.kbase.1 --kbase_collection GTDB --output  gtdb_genome_attribs.json
"""

# change header to specific context (default mapper: capitalize first character)
HEADER_MAPPER = {'accession': names.FLD_GENOME_ATTRIBS_GENOME_NAME}


def _parse_from_metadata_file(load_files, exist_features, additional_features={}):
    """
    Fetches certain columns (combination of exist_features and additional_features) from GTDB metadata file
    and saves result as a pandas data from
    """

    frames = [pd.read_csv(load_file, sep='\t', header=0, keep_default_na=False,
                          usecols=exist_features.union(additional_features)) for load_file in load_files]
    df = pd.concat(frames, ignore_index=True)

    return df


def _rename_col(df, header_mapper):
    """
    Remaps data frame's column as specified in `header_mapper`

    Changes dataframe's header in place.

     Args:
        df:  A data frame object
        header_mapper: A user input mapper to map specific col to user desired name

     Returns:
         None (updates dataframe in place)
    """

    df.rename(columns=header_mapper, errors="raise", inplace=True)


def _row_to_doc(row, kbase_collection, load_version):
    """
    Transforms row (from a dataframe) into ArangoDB collection document
    """
    doc = init_genome_atrri_doc(kbase_collection, load_version, parse_genome_id(row.accession))

    doc[FLD_COLLECTION_ID] = kbase_collection
    doc[FLD_LOAD_VERSION] = load_version

    doc.update(row.to_dict())

    return doc


def _df_to_docs(df, kbase_collection, load_version):
    docs = df.apply(_row_to_doc, args=(kbase_collection, load_version), axis=1).to_list()

    return docs


def main():
    if not all([header in loader_common_names.SELECTED_FEATURES for header in HEADER_MAPPER.keys()]):
        raise ValueError('Please make sure HEADER_MAPPER keys are all included in the FEATURES')

    parser = argparse.ArgumentParser(
        description='PROTOTYPE - Prepare GTDB genome statistics data in JSON format for arango import.')
    required = parser.add_argument_group('required named arguments')
    optional = parser.add_argument_group('optional arguments')

    # Required positional argument
    required.add_argument('load_files', type=argparse.FileType('r'), nargs='+',
                          help='GTDB genome metadata files (e.g. ar53_metadata_r207.tsv)')

    # Required flag argument
    required.add_argument(f'--{loader_common_names.LOAD_VER_ARG_NAME}', required=True, type=str,
                          help=loader_common_names.LOAD_VER_DESCR)

    # Optional argument
    optional.add_argument(f'--{loader_common_names.KBASE_COLLECTION_ARG_NAME}', type=str,
                          default=names.DEFAULT_KBASE_COLL_NAME,
                          help=loader_common_names.KBASE_COLLECTION_DESCR)
    optional.add_argument("-o", "--output", type=argparse.FileType('w'),
                          default=loader_common_names.GTDB_GENOME_ATTR_FILE,
                          help=f"output JSON file path (default: {loader_common_names.GTDB_GENOME_ATTR_FILE}")

    args = parser.parse_args()
    load_files, load_version, kbase_collection = (args.load_files,
                                                  getattr(args, loader_common_names.LOAD_VER_ARG_NAME),
                                                  getattr(args, loader_common_names.KBASE_COLLECTION_ARG_NAME))

    print('start parsing input files')
    df = _parse_from_metadata_file(load_files, loader_common_names.SELECTED_FEATURES)
    docs = _df_to_docs(df, kbase_collection, load_version)

    with args.output as genome_attribs_json:
        convert_to_json(docs, genome_attribs_json)


if __name__ == "__main__":
    main()
